/*
 * movement.c
 *
 *  Created on: Sep 25, 2014
 *      Author: superman
 */
#include "space_invaders.h"
#include "movement.h"


extern Bunker bunkerArray[];
extern Bullet bulletArray[];
extern Bullet tankBullet;

int alienOriginX;		//we put the origin on the top left corner
int alienOriginY;
int firstColAliveAliens;
int lastColAliveAliens;
int alienFarRightOffset;
int alienDirection;		//see #defines in movement.h for possible directions



int tankOriginX;
int tankOriginY;



//returns a 0 if successful, returns an error if not
void initializeMovement(){
	firstColAliveAliens = 0;
	lastColAliveAliens = ALIENS_PER_ROW - 1;
	alienOriginX = ORIGIN_X_INITIAL;
	alienOriginY = ORIGIN_Y_INITIAL;
	tankOriginX = TANK_X_INITIAL;
	tankOriginY = TANK_Y_INITIAL;
	alienFarRightOffset = FARRIGHT_OFFSET_INITIAL;
	alienDirection = ALIEN_DIRECTION_INITIAL;

}


//updates the locations of the aliens and bullets between every interval of time
void updateLocations(){
	moveAliens();
	moveTankBullet();
	moveAlienBullets();
}


//updates the origin location by the predefined amount
int moveAliens(){
	//basic implementation, without ups or downs

	//what to do if aliens are on the left side of the screen
	if(alienDirection == LEFT && (alienOriginX - PIXELS_PER_MOVE < -1*(ALIEN_WIDTH * firstColAliveAliens))){
		alienOriginY += PIXELS_PER_MOVE;
		undrawAliens(DOWN);
		alienDirection = RIGHT;

	}
	//aliens are on the right side of the screen
	else if(alienDirection == RIGHT && (alienOriginX + alienFarRightOffset + PIXELS_PER_MOVE > (SCREEN_X_PIXELS + (ALIENS_PER_ROW - lastColAliveAliens - 1)*ALIEN_WIDTH))){
		alienOriginY += PIXELS_PER_MOVE;
		undrawAliens(DOWN);
		alienDirection = LEFT;
	}
	//aliens are free to move as normal
	else{
		alienOriginX += alienDirection == RIGHT ? PIXELS_PER_MOVE : PIXELS_PER_MOVE * -1;
		undrawAliens(alienDirection);
	}
	drawAliens();

	return 0;
}

//updates the position of the tank
int moveTank(int direction){
	if(direction == LEFT){
		if(!(tankOriginX - PIXELS_PER_MOVE < 0)){
			tankOriginX -= PIXELS_PER_MOVE;
		}
		else{
			tankOriginX = 0;
		}

	}
	else{
		if(!(tankOriginX + PIXELS_PER_MOVE + TANK_WIDTH >= SCREEN_X_PIXELS )){
			tankOriginX += PIXELS_PER_MOVE;
		}
		else{
			tankOriginX = SCREEN_X_PIXELS - 1 - TANK_WIDTH;
		}
	}

	undrawTank(direction);
	drawTank();


	return 0;
}

int damageBunker(int bunkerNum){
	if(bunkerArray[bunkerNum].damageState < 4){
		bunkerArray[bunkerNum].damageState=bunkerArray[bunkerNum].damageState + 1;
	}
	else{
		bunkerArray[bunkerNum].damageState = 0;
	}
	drawBunker(bunkerNum);

	return 0;
}

int moveAlienBullets(){
	int i;
	for(i = 0; i < NUM_ALIEN_BULLETS; i++){
		if(bulletArray[i].type != INACTIVE_BULLET){ //bullet is active
			bulletArray[i].y += ALIEN_BULLETS_PIXELS_PER_MOVE;
			bulletArray[i].state = (bulletArray[i].state + 1) % 3;
			undrawAlienBullet();
			if(bulletArray[i].y >= 480 - BULLET_HEIGHT){
				bulletArray[i].type = INACTIVE_BULLET; //bullet has gone offscreen so deactivate the bullet
				clearAlienBullet(i);
			}

		}
	}


	drawAlienBullet(-1);
	return 0;
}

int moveTankBullet(){
	if(tankBullet.type != INACTIVE_BULLET){ //bullet is active
		tankBullet.y -= TANK_BULLET_PIXELS_PER_MOVE;
		undrawTankBullet();
		if(tankBullet.y < 0){
			tankBullet.type = INACTIVE_BULLET; //bullet has gone offscreen so deactivate the bullet
			clearTankBullet();
		}

	}


	drawTankBullet();
	return 0;
}


